<!doctype html> <!-- assignment html-->
<html><head><meta charset="utf-8"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>

public static void showGrayLennaHist() {
	try {
		String locGrayLenna = "경로생략/LennaGray.png";
		
		Mat imageGrayLenna = Imgcodecs.imread(locGrayLenna);
		
		// Histogram Start
		List<Mat> bgrPlanes = new ArrayList<>();
		Core.split(imageGrayLenna, bgrPlanes);
		
		int histSize = 256;
		boolean accumulate = false;
		
		float[] range = {0, 256};
		MatOfFloat histRange = new MatOfFloat(range);
		Mat iHist = new Mat();
		Imgproc.calcHist(bgrPlanes, new MatOfInt(0), new Mat(),
						iHist, new MatOfInt(histSize), histRange, accumulate);
		
		int histW = 512, histH = 400;
		int binW = (int) Math.round((double) histW / histSize);
		
		Mat imageHistLenna = new Mat(histH, histW, CvType.CV_8UC3, new Scalar(0, 0, 0));
		
		Core.normalize(iHist, iHist, 0, imageHistLenna.rows(), Core.NORM_MINMAX);

		float[] iHistData = new float[(int) (iHist.total() * iHist.channels())];
		iHist.get(0, 0, iHistData);
		
		for( int i = 1; i < histSize; i++ ) {
			Imgproc.line(imageHistLenna
				,new Point(binW * (i - 1), histH - Math.round(iHistData[i - 1]))
				,new Point(binW * (i), histH - Math.round(iHistData[i]))
				,new Scalar(255, 255, 255), 1);
		}
		// Histogram End

		// Show
		HighGui.imshow("LennaGray", imageGrayLenna);
		HighGui.imshow("LennaGrayHist", imageHistLenna);
		
	} catch (Exception e) {
		e.printStackTrace();
	}
}
